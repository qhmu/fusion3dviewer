shortLen = length(shortVector)
longLen = length(longVector)
res = rep(shortVector, times = round(longLen/shortLen) + 1)
return(res[1:longLen])
}
# prepare for the input df
{
myRainbow = myRepeat(rainbow(lesionNumber), originZ)
maxZ = max(originZ)
phyDf = data.frame(Lesion = 1:length(lesionMother),
Mother = lesionMother,
lesionId = 1:length(lesionMother))
phyDfMelt = melt(phyDf, measure =c('Lesion', 'Mother'))
phyDfMelt$variable = factor(phyDfMelt$variable,levels = c('Mother','Lesion'))
}
# plot for only one lesion by the genetic alteration
maxRadius = max(abs(pltDF[, c('x', 'y', 'z')]))
selectSpace = 1
{
index = spaceArr == selectSpace
colByGenoIndex = colByGenoType[match(geno, colByGenoType$Geno),]$col
# par3d(windowRect = c(20, 30, 800, 800))
# clear3d()
# plot3d(
#   pltDF[index, c('x', 'y', 'z')],
#   type = 'p',
#   # col = colByGenIndex[index], # color by lesion
#   col = colByGenoIndex[index], # color by heterogeneity, geno
#   #! attention! the cells are colored by the geno types
#   axes = F,
#   xlab = "",
#   ylab = "",
#   zlab = "",
#   xlim = c(-maxRadius, maxRadius),
#   ylim = c(-maxRadius, maxRadius),
#   zlim = c(-maxRadius, maxRadius),
#   expand = 30
# )
}
{# visualize top 11 lesions
xchangArr = 2*maxRadius*c(0,-1,-1,0,1,1,1,0,-1,0,0)
zchangArr = 2*maxRadius*c(0,0,1,1,1,0,-1,-1,-1,0,0)
ychangArr = 2*maxRadius*c(0,0,0,0,0,0,0,0,0,1,-1)
maxRadius = max(abs(pltDF[, c('x', 'y', 'z')]))
pltDFAll = pltDF[, c('x', 'y', 'z')]
for (i in 1:11) {
selectSpace = i
index = spaceArr == selectSpace
if(i>n_space){
break
}
pltDFAll[index,]$x =  pltDF[index, ]$x + xchangArr[selectSpace]
pltDFAll[index,]$y =  pltDF[index, ]$y + ychangArr[selectSpace]
pltDFAll[index,]$z =  pltDF[index, ]$z + zchangArr[selectSpace]
}
colByGenoIndex = colByGenoType[match(geno, colByGenoType$Geno),]$col
#! when using the slope
par3d(
# windowRect = c(20, 30, 800, 800),
zoom = 0.5,
userMatrix = matrix(c(0.9418525,-0.2365354,0.2386722,0,0.104028,-0.4701345,-0.8764427,0,0.3195179,0.8503081,-0.4181913,0,0,0,0,1), ncol = 4),
windowRect=c(1920,  225, 2700,  995))
clear3d()
#! change the color of the previous index
plot3d(
pltDFAll,
type = 'p',
col = colByGenIndex, # color by lesion
# col = colByGenoIndex, # color by heterogeneity, geno
axes = F,
xlab = "",
ylab = "",
zlab = "",
xlim = 3*c(-maxRadius, maxRadius),
ylim = 3*c(-maxRadius, maxRadius),
zlim = 3*c(-maxRadius, maxRadius),
)
}
# save the plot
rgl.snapshot('./res_3dPlot4all10lesions.png')
# set the working directory
dataFile = './multipleLesions10Lesions.RData'
load(dataFile)
load('./readSimV134.RData')
setwd("~/Documents/1_github/mfgCodes/growthCurve")
# load the library
library(ggplot2)
library(scales)
library(ggsci)
library(scico)
# set the working directory
dataFile = './multipleLesions10Lesions.RData'
load(dataFile)
#! extract the color code from the scale fill function
nColOfGgsci = 7
p = ggplot(data.frame(x = 1:nColOfGgsci,
y = 1:nColOfGgsci),
mapping = aes(x = x,
y = y,
col =  as.factor(x))) +
geom_point() +
scale_color_startrek()
g = ggplot_build(p)
sci7ColArr = unique(g$data[[1]]["colour"])[[1]]
# change the color order
sci7ColArrOrder = sci7ColArr[c(6,5,4,3,2,1,7)]
cls =c('#9e0142','#d53e4f','#f46d43','#fdae61','#fee08b','#e6f598','#abdda4','#66c2a5','#3288bd','#5e4fa2')
cls[1:6] = sci7ColArrOrder
# prepare for the lesions
{
cellDF = data.frame(originX,originY,originZ,ancester,gen)
growthCurveTab = table(cellDF[,c('ancester', 'gen')])
growthCurveDf = as.data.frame(t(growthCurveTab))
colnames(growthCurveDf) = c('time', 'lesion', 'cellNumber')
for (tmpLesion in unique(growthCurveDf$lesion)) {
growthCurveDf$cellNumber[growthCurveDf$lesion == tmpLesion] =
cumsum(growthCurveDf$cellNumber[growthCurveDf$lesion == tmpLesion])
}
growthCurveDf = growthCurveDf[growthCurveDf$cellNumber>0,]
}
# add the first cell
growthCurveDf[nrow(growthCurveDf) + 1,] = c(1,1,1)
# plot the growth curve
growthCurveDf$lesion = paste0('Lesion ',growthCurveDf$lesion)
growthCurveDf$lesion = factor(growthCurveDf$lesion, levels = paste0('Lesion ', 1:10))
ggplot(growthCurveDf, mapping = aes(x=as.numeric(time)*1/0.69,
y=cellNumber*1e3,
group=lesion, color=lesion)) +
annotate("rect", xmin = 228, xmax = 240, ymin = 0, ymax = 1e6,
alpha = .3,fill = "blue") +
annotate("rect", xmin = 228, xmax = 240, ymin = 1e6, ymax = 1e9,
alpha = .3,fill = "green") +
annotate("rect", xmin = 0, xmax = 228, ymin = 0, ymax = 1e6,
alpha = .05,fill = "blue") +
annotate("rect", xmin = 0, xmax = 228, ymin = 1e6, ymax = 1e9,
alpha = .05,fill = "green") +
annotate('text', x = 234, y=3e4, label = 'Invisible', angle=90) +
annotate('text', x = 234, y=3e7, label = 'Visible', angle=90) +
# annotate('text', x = 60, y=8e8, label = 'Patient with symptom', color = 'red') +
theme_classic() +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
expand = c(0, 0)
) +
scale_x_continuous(expand = c(0, 0)) +
geom_hline(yintercept = 1e6, linetype = "dashed",col = 'blue') +
geom_hline(yintercept = 1e9, linetype = "dashed",col = 'red') +
labs(x = 'Days',
y = 'Cell Number',
color = 'Lesion') +
scale_colour_manual(values = cls) +
geom_line(size = 2) +
theme(text = element_text(size=20),
plot.margin = margin(rep(20,4))) # set the margin plot
# load the library
library(ggplot2)
library(reshape)
library(igraph)
# library(colorspace)
library(rgl)
library(oce)
library(plot3D)
library(scales)
# library(RColorBrewer)
library(ggrepel)
library(ggsci)
library(scico)
# set the working directory
dataFile = './multipleLesions10Lesions.RData'
load(dataFile)
# calculate the genotype
# generate the genotype from parent, ca
{
n_geno = 1
geno = NULL
# initial
geno[1] = n_geno
# loop for recurrent
for (i in 2:length(parent)) {
parentID = parent[i]
cellMut = ca[i]
parentMut = ca[parentID]
if(cellMut == parentMut){
geno[i] = geno[parentID] # the same with parent geno
} else if ( cellMut > parentMut){
# new geno
n_geno = n_geno + 1
geno[i] = n_geno
}else{
print('Error')
break
}
}
genoDf = data.frame(geno,ca)
library(plyr)
counts = ddply(genoDf, .(genoDf$geno, genoDf$ca), nrow)
counts = counts[order(counts$V1,decreasing = T),]
colnames(counts) = c('Geno','MutNum','Freq')
head(counts)
dim(counts)
counts$col = 'grey'
#! extract the color code from the scale fill function and then do the test
nColOfGgsci = 7
p = ggplot(data.frame(x = 1:nColOfGgsci,
y = 1:nColOfGgsci),
mapping = aes(x = x,
y = y,
col =  as.factor(x))) +
geom_point() +
scale_color_startrek()
g = ggplot_build(p)
sci7ColArr = unique(g$data[[1]]["colour"])[[1]]
# change the color order
sci7ColArrOrder = sci7ColArr[c(6,5,4,3,2,1,7)]
counts[counts$Freq>= counts$Freq[100],]$col = rainbow(100)
counts$col[2:7] = sci7ColArrOrder
# the color of the lesions with only one mutation is grey90
counts[counts$MutNum==1,]$col = 'grey90'
colByGenoType = counts
head(colByGenoType)
}
# calculate the genotype
# generate the genotype from parent, ca
{
n_geno = 1
geno = NULL
# initial
geno[1] = n_geno
# loop for recurrent
for (i in 2:length(parent)) {
parentID = parent[i]
cellMut = ca[i]
parentMut = ca[parentID]
if(cellMut == parentMut){
geno[i] = geno[parentID] # the same with parent geno
} else if ( cellMut > parentMut){
# new geno
n_geno = n_geno + 1
geno[i] = n_geno
}else{
print('Error')
break
}
}
genoDf = data.frame(geno,ca)
library(plyr)
counts = ddply(genoDf, .(genoDf$geno, genoDf$ca), nrow)
counts = counts[order(counts$V1,decreasing = T),]
colnames(counts) = c('Geno','MutNum','Freq')
head(counts)
dim(counts)
counts$col = 'grey'
#! extract the color code from the scale fill function and then do the test
nColOfGgsci = 7
p = ggplot(data.frame(x = 1:nColOfGgsci,
y = 1:nColOfGgsci),
mapping = aes(x = x,
y = y,
col =  as.factor(x))) +
geom_point() +
scale_color_startrek()
g = ggplot_build(p)
sci7ColArr = unique(g$data[[1]]["colour"])[[1]]
# change the color order
sci7ColArrOrder = sci7ColArr[c(6,5,4,3,2,1,7)]
counts[counts$Freq>= counts$Freq[100],]$col = rainbow(100)
counts$col[2:7] = sci7ColArrOrder
# the color of the lesions with only one mutation is grey90
counts[counts$MutNum==1,]$col = 'grey90'
colByGenoType = counts
head(colByGenoType)
}
# plot for one 3d lesion
{
selectSpace = 1
index = (spaceArr == selectSpace)
radius = radiusArr[selectSpace]
cellDF = data.frame(originX,originY,
originZ,ancester,gen,
spaceArr)
colnames(cellDF) = c('x', 'y', 'z', 'genIndex', 'time',
'space') # add the space
pltDF = cellDF
oriDf = cellDF # finalDf
}
# color by lesion
{
lesionNumber = n_space
cls =c('#9e0142','#d53e4f','#f46d43','#fdae61','#fee08b','#e6f598','#abdda4','#66c2a5','#3288bd','#5e4fa2')
cls[1:6] = sci7ColArrOrder  # sci7ColArr
colDf = data.frame(colInd = 1:length(cls), colVal = cls)
colByGenIndex = colDf[match(pltDF$genIndex, colDf$colInd),]$colVal
}
myRepeat = function(shortVector, longVector){
shortLen = length(shortVector)
longLen = length(longVector)
res = rep(shortVector, times = round(longLen/shortLen) + 1)
return(res[1:longLen])
}
# prepare for the input df
{
myRainbow = myRepeat(rainbow(lesionNumber), originZ)
maxZ = max(originZ)
phyDf = data.frame(Lesion = 1:length(lesionMother),
Mother = lesionMother,
lesionId = 1:length(lesionMother))
phyDfMelt = melt(phyDf, measure =c('Lesion', 'Mother'))
phyDfMelt$variable = factor(phyDfMelt$variable,levels = c('Mother','Lesion'))
}
# plot for only one lesion by the genetic alteration
maxRadius = max(abs(pltDF[, c('x', 'y', 'z')]))
selectSpace = 1
{
index = spaceArr == selectSpace
colByGenoIndex = colByGenoType[match(geno, colByGenoType$Geno),]$col
# par3d(windowRect = c(20, 30, 800, 800))
# clear3d()
# plot3d(
#   pltDF[index, c('x', 'y', 'z')],
#   type = 'p',
#   # col = colByGenIndex[index], # color by lesion
#   col = colByGenoIndex[index], # color by heterogeneity, geno
#   #! attention! the cells are colored by the geno types
#   axes = F,
#   xlab = "",
#   ylab = "",
#   zlab = "",
#   xlim = c(-maxRadius, maxRadius),
#   ylim = c(-maxRadius, maxRadius),
#   zlim = c(-maxRadius, maxRadius),
#   expand = 30
# )
}
{# visualize top 11 lesions
xchangArr = 2*maxRadius*c(0,-1,-1,0,1,1,1,0,-1,0,0)
zchangArr = 2*maxRadius*c(0,0,1,1,1,0,-1,-1,-1,0,0)
ychangArr = 2*maxRadius*c(0,0,0,0,0,0,0,0,0,1,-1)
maxRadius = max(abs(pltDF[, c('x', 'y', 'z')]))
pltDFAll = pltDF[, c('x', 'y', 'z')]
for (i in 1:11) {
selectSpace = i
index = spaceArr == selectSpace
if(i>n_space){
break
}
pltDFAll[index,]$x =  pltDF[index, ]$x + xchangArr[selectSpace]
pltDFAll[index,]$y =  pltDF[index, ]$y + ychangArr[selectSpace]
pltDFAll[index,]$z =  pltDF[index, ]$z + zchangArr[selectSpace]
}
colByGenoIndex = colByGenoType[match(geno, colByGenoType$Geno),]$col
#! when using the slope
par3d(
# windowRect = c(20, 30, 800, 800),
zoom = 0.5,
userMatrix = matrix(c(0.9418525,-0.2365354,0.2386722,0,0.104028,-0.4701345,-0.8764427,0,0.3195179,0.8503081,-0.4181913,0,0,0,0,1), ncol = 4),
windowRect=c(1920,  225, 2700,  995))
clear3d()
#! change the color of the previous index
plot3d(
pltDFAll,
type = 'p',
col = colByGenIndex, # color by lesion
# col = colByGenoIndex, # color by heterogeneity, geno
axes = F,
xlab = "",
ylab = "",
zlab = "",
xlim = 3*c(-maxRadius, maxRadius),
ylim = 3*c(-maxRadius, maxRadius),
zlim = 3*c(-maxRadius, maxRadius),
)
}
# load the library
library(ggplot2)
library(reshape)
library(igraph)
# library(colorspace)
library(rgl)
library(oce)
library(plot3D)
library(scales)
# library(RColorBrewer)
library(ggrepel)
library(ggsci)
library(scico)
#! when using the slope
par3d(
# windowRect = c(20, 30, 800, 800),
zoom = 0.5,
userMatrix = matrix(c(0.9418525,-0.2365354,0.2386722,0,0.104028,-0.4701345,-0.8764427,0,0.3195179,0.8503081,-0.4181913,0,0,0,0,1), ncol = 4),
windowRect=c(1920,  225, 2700,  995))
clear3d()
#! change the color of the previous index
plot3d(
pltDFAll,
type = 'p',
col = colByGenIndex, # color by lesion
# col = colByGenoIndex, # color by heterogeneity, geno
axes = F,
xlab = "",
ylab = "",
zlab = "",
xlim = 3*c(-maxRadius, maxRadius),
ylim = 3*c(-maxRadius, maxRadius),
zlim = 3*c(-maxRadius, maxRadius),
)
?save.image
setwd("~/Documents/1_github/fusion3dviewerTest")
library(shiny)
library(shinydashboard)
library(bio3d)
library(r3dmol)
library(shinythemes)
runApp()
GFS = read.delim('www/fusions.list.tsv')
View(GFS)
View(GFS)
runApp()
filePwd = '/Users/jiabao/Documents/1_github/fusion3dviewerTest/www/Fusion_PDB'
list.dirs(filePwd)
list.files(filePwd)
fileInPwd = list.files(filePwd)
grep('pdb', fileInPwd)
pdbFileList = fileInPwd[grep('pdb', fileInPwd)]
pdbFileList = fileInPwd[grep('svg', fileInPwd)]
svgFileList = fileInPwd[grep('svg', fileInPwd)]
pdbFileList = fileInPwd[grep('pdb', fileInPwd)]
svgFileList = fileInPwd[grep('svg', fileInPwd)]
length(fileInPwd)
length(pdbFileList)
length(svgFileList)
svgFileList = fileInPwd[grep('svg|SVG', fileInPwd)]
length(pdbFileList)
length(svgFileList)
pdbFileList[1]
pdbFileList[1][1:-3]
pdbFileList[1][1:2]
pdbFileList[1][1:3]
pdbFileList[1]
substr(pdbFileList[1], 1 , -4)
substr(pdbFileList[1], 1 , 4)
substr(pdbFileList[1], 1 , length(pdbFileList[1])-4)
substr(pdbFileList[1], 1 , nchar(pdbFileList[1])-4)
myRmSuffix = function(x){
return(substr(x, 1, nchar(x)-4))
}
lapply(pdbFileList, myRmSuffix)
unlist(lapply(pdbFileList, myRmSuffix))
unlist(lapply(svgFileList, myRmSuffix))
pdbFileRemoveSuffix = unlist(lapply(pdbFileList, myRmSuffix))
svgFileRemoveSuffix = unlist(lapply(svgFileList, myRmSuffix))
pdbFileDf = data.frame(pdbFile = pdbFileList,
name = pdbFileRemoveSuffix)
svgFileDf = data.frame(svgFile = svgFileList,
name = svgFileRemoveSuffix)
merge(pdbFileDf, svgFileDf)
?merge
merge(pdbFileDf, svgFileDf, all = T)
pdbSvgMergeDf = merge(pdbFileDf, svgFileDf, all = T)
is.na(pdbSvgMergeDf)
apply(is.na(pdbSvgMergeDf), 1, |)
rowSums(pdbSvgMergeDf)
apply(pdbSvgMergeDf, 1, rowSums)
apply(pdbSvgMergeDf, 1, print)
apply(is.na(pdbSvgMergeDf), 1, print)
apply(is.na(pdbSvgMergeDf), 1, rowSums)
apply(is.na(pdbSvgMergeDf), 1, sum)
pdbSvgMergeDfNaFile = pdbSvgMergeDf[apply(is.na(pdbSvgMergeDf), 1, sum),]
View(pdbSvgMergeDfNaFile)
apply(is.na(pdbSvgMergeDf), 1, sum)
order(apply(is.na(pdbSvgMergeDf), 1, sum))
order(apply(is.na(pdbSvgMergeDf), 1, sum)==T)
order(apply(is.na(pdbSvgMergeDf), 1, sum)==1)
which((is.na(pdbSvgMergeDf), 1, sum)==1)
(is.na(pdbSvgMergeDf), 1, sum)==1
apply(is.na(pdbSvgMergeDf), 1, sum)==1
which(apply(is.na(pdbSvgMergeDf), 1, sum)==1)
pdbSvgMergeDfNaFile = pdbSvgMergeDf[which(apply(is.na(pdbSvgMergeDf), 1, sum)==1),]
View(pdbSvgMergeDfNaFile)
GFS$Fusion[GFS$Group==input$fusion]
GFS$Group
unique(GFS$Group)
unique(GFS$Fusion[GFS$Group=='FGFR3 fusions'])
unique(GFS$Group)
View(GFS)
pdbSvgMergeDfNaFile
pdbSvgMergeDfNaFile
pdbSvgMergeDf
na.omit(pdbSvgMergeDf)
pdbSvgMergeDfNona = na.omit(pdbSvgMergeDf)
write.csv(pdbSvgMergeDfNona, file = 'pdbSvgMergeDfNona.csv')
write.csv(pdbSvgMergeDfNona, file = 'pdbSvgMergeDfNona.csv', index = F)
write.csv(pdbSvgMergeDfNona, file = 'pdbSvgMergeDfNona.csv', row.names = F)
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv')
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv')
View(pdbSvgMergeDfNona)
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv', sep = ',')
View(pdbSvgMergeDfNona)
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv', sep = ',')
GFS = GFS[GFS$Group %in% pdbSvgMergeDfNona$name,]
View(GFS)
GFS = read.delim('www/fusions.list.tsv')
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv', sep = ',')
View(GFS)
GFS = GFS[GFS$Fusion %in% pdbSvgMergeDfNona$name,]
View(GFS)
# setwd("~/Documents/1_github/fusion3dviewerTest")
GFS = read.delim('www/fusions.list.tsv')
pdbSvgMergeDfNona = read.delim('pdbSvgMergeDfNona.csv', sep = ',')
runApp()
View(pdbSvgMergeDfNaFile)
runApp()
